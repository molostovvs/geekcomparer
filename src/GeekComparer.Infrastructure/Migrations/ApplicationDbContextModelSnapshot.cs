// <auto-generated />
using System;
using GeekComparer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeekComparer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CameraSmartphone", b =>
                {
                    b.Property<Guid>("CamerasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SmartphoneId")
                        .HasColumnType("uuid");

                    b.HasKey("CamerasId", "SmartphoneId");

                    b.HasIndex("SmartphoneId");

                    b.ToTable("CameraSmartphone");
                });

            modelBuilder.Entity("CellularFiveGBand", b =>
                {
                    b.Property<int>("Bands5GId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.HasKey("Bands5GId", "CellularId");

                    b.HasIndex("CellularId");

                    b.ToTable("CellularFiveGBand");
                });

            modelBuilder.Entity("CellularFourGBand", b =>
                {
                    b.Property<int>("Bands4GId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.HasKey("Bands4GId", "CellularId");

                    b.HasIndex("CellularId");

                    b.ToTable("CellularFourGBand");
                });

            modelBuilder.Entity("CellularSimType", b =>
                {
                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.Property<int>("SimTypeId")
                        .HasColumnType("integer");

                    b.HasKey("CellularId", "SimTypeId");

                    b.HasIndex("SimTypeId");

                    b.ToTable("CellularSimType");
                });

            modelBuilder.Entity("CellularThreeGBand", b =>
                {
                    b.Property<int>("Bands3GId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.HasKey("Bands3GId", "CellularId");

                    b.HasIndex("CellularId");

                    b.ToTable("CellularThreeGBand");
                });

            modelBuilder.Entity("CellularTwoGBand", b =>
                {
                    b.Property<int>("Bands2GId")
                        .HasColumnType("integer");

                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.HasKey("Bands2GId", "CellularId");

                    b.HasIndex("CellularId");

                    b.ToTable("CellularTwoGBand");
                });

            modelBuilder.Entity("CodecSound", b =>
                {
                    b.Property<int>("CodecsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SoundId")
                        .HasColumnType("uuid");

                    b.HasKey("CodecsId", "SoundId");

                    b.HasIndex("SoundId");

                    b.ToTable("CodecSound");
                });

            modelBuilder.Entity("ConnectivityNavigationSystem", b =>
                {
                    b.Property<Guid>("ConnectivityId")
                        .HasColumnType("uuid");

                    b.Property<int>("NavigationSystemsId")
                        .HasColumnType("integer");

                    b.HasKey("ConnectivityId", "NavigationSystemsId");

                    b.HasIndex("NavigationSystemsId");

                    b.ToTable("ConnectivityNavigationSystem");
                });

            modelBuilder.Entity("GeekComparer.Domain.AntutuBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CPU")
                        .HasColumnType("integer");

                    b.Property<int>("GPU")
                        .HasColumnType("integer");

                    b.Property<int>("MEM")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.Property<int>("UX")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AntutuBenchmarks");
                });

            modelBuilder.Entity("GeekComparer.Domain.Autofocus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Autofocuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Phase"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Contrast"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Battery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("LifeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Replaceable")
                        .HasColumnType("boolean");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LifeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Batteries");
                });

            modelBuilder.Entity("GeekComparer.Domain.BatteryLife", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("Gaming")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("Standby")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("Video")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WebBrowsing")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("BatteryLives");
                });

            modelBuilder.Entity("GeekComparer.Domain.BatteryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BatteryTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "LiPo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LiIon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "NiCd"
                        },
                        new
                        {
                            Id = 4,
                            Name = "NiMH"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Benchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AntutuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DxOMarkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Geekbench5Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThreeDMarkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AntutuId");

                    b.HasIndex("DxOMarkId");

                    b.HasIndex("Geekbench5Id");

                    b.HasIndex("ThreeDMarkId");

                    b.ToTable("Benchmarks");
                });

            modelBuilder.Entity("GeekComparer.Domain.Bluetooth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bluetooths");
                });

            modelBuilder.Entity("GeekComparer.Domain.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BackMaterialId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FingerprintLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("FrameMaterialId")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("IPRating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScreenProtection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Thickness")
                        .HasColumnType("double precision");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double>("Width")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BackMaterialId");

                    b.HasIndex("FingerprintLocationId");

                    b.HasIndex("FrameMaterialId");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("GeekComparer.Domain.CPU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TDP")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("GeekComparer.Domain.Camera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Aperture")
                        .HasColumnType("double precision");

                    b.Property<int>("AutofocusId")
                        .HasColumnType("integer");

                    b.Property<int>("DigitalZoomValue")
                        .HasColumnType("integer");

                    b.Property<int>("FocalLength")
                        .HasColumnType("integer");

                    b.Property<bool>("HasOpticalZoom")
                        .HasColumnType("boolean");

                    b.Property<int>("LensTypeId")
                        .HasColumnType("integer");

                    b.Property<double>("Matrix")
                        .HasColumnType("double precision");

                    b.Property<int>("OpticalZoomValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("PhotoCapabilitiesId")
                        .HasColumnType("uuid");

                    b.Property<double>("PixelSize")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uuid");

                    b.Property<int>("StabilizationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("VideoCapabilitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AutofocusId");

                    b.HasIndex("LensTypeId");

                    b.HasIndex("PhotoCapabilitiesId");

                    b.HasIndex("SensorId");

                    b.HasIndex("StabilizationId");

                    b.HasIndex("VideoCapabilitiesId");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("GeekComparer.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Flagship"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mid"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Budget"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Cellular", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MultiSimModeId")
                        .HasColumnType("integer");

                    b.Property<int>("SimCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MultiSimModeId");

                    b.ToTable("Cellulars");
                });

            modelBuilder.Entity("GeekComparer.Domain.Charging", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("FullChargingTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("HalfChargingTime")
                        .HasColumnType("interval");

                    b.Property<int>("ReverseChargePower")
                        .HasColumnType("integer");

                    b.Property<bool>("ReverseChargingSupported")
                        .HasColumnType("boolean");

                    b.Property<int>("WiredChargePower")
                        .HasColumnType("integer");

                    b.Property<int>("WirelessChargePower")
                        .HasColumnType("integer");

                    b.Property<bool>("WirelessChargingSupported")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Chargings");
                });

            modelBuilder.Entity("GeekComparer.Domain.Codec", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Codecs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SBC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "aptX"
                        },
                        new
                        {
                            Id = 3,
                            Name = "aptX_HD"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LDAC"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LHDC"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LLAC"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Connectivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BluetoothId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CellularId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasIR")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasNFC")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasUWB")
                        .HasColumnType("boolean");

                    b.Property<Guid>("USBId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WiFiId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BluetoothId");

                    b.HasIndex("CellularId");

                    b.HasIndex("USBId");

                    b.HasIndex("WiFiId");

                    b.ToTable("Connectivities");
                });

            modelBuilder.Entity("GeekComparer.Domain.Core", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CPUId")
                        .HasColumnType("uuid");

                    b.Property<int>("Clock")
                        .HasColumnType("integer");

                    b.Property<string>("InstructionSet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("LaunchDate")
                        .HasColumnType("date");

                    b.Property<string>("Microarchitecture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CPUId");

                    b.ToTable("Cores");
                });

            modelBuilder.Entity("GeekComparer.Domain.Distribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Distributions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "MIUI"
                        },
                        new
                        {
                            Id = 2,
                            Name = "FunTouch"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EMUI"
                        },
                        new
                        {
                            Id = 4,
                            Name = "FireOS"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.DxOMarkBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Bokeh")
                        .HasColumnType("integer");

                    b.Property<int>("Photo")
                        .HasColumnType("integer");

                    b.Property<int>("Preview")
                        .HasColumnType("integer");

                    b.Property<int>("Video")
                        .HasColumnType("integer");

                    b.Property<int>("Zoom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DxOMarkBenchmarks");
                });

            modelBuilder.Entity("GeekComparer.Domain.FingerprintLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FingerprintLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Screen"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Button"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Side"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Back"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.FiveGBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FiveGBands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "n1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "n2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "n3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "n5"
                        },
                        new
                        {
                            Id = 7,
                            Name = "n7"
                        },
                        new
                        {
                            Id = 8,
                            Name = "n8"
                        },
                        new
                        {
                            Id = 12,
                            Name = "n12"
                        },
                        new
                        {
                            Id = 13,
                            Name = "n13"
                        },
                        new
                        {
                            Id = 14,
                            Name = "n14"
                        },
                        new
                        {
                            Id = 18,
                            Name = "n18"
                        },
                        new
                        {
                            Id = 20,
                            Name = "n20"
                        },
                        new
                        {
                            Id = 24,
                            Name = "n24"
                        },
                        new
                        {
                            Id = 25,
                            Name = "n25"
                        },
                        new
                        {
                            Id = 26,
                            Name = "n26"
                        },
                        new
                        {
                            Id = 28,
                            Name = "n28"
                        },
                        new
                        {
                            Id = 29,
                            Name = "n29"
                        },
                        new
                        {
                            Id = 30,
                            Name = "n30"
                        },
                        new
                        {
                            Id = 34,
                            Name = "n34"
                        },
                        new
                        {
                            Id = 38,
                            Name = "n38"
                        },
                        new
                        {
                            Id = 39,
                            Name = "n39"
                        },
                        new
                        {
                            Id = 40,
                            Name = "n40"
                        },
                        new
                        {
                            Id = 41,
                            Name = "n41"
                        },
                        new
                        {
                            Id = 46,
                            Name = "n46"
                        },
                        new
                        {
                            Id = 47,
                            Name = "n47"
                        },
                        new
                        {
                            Id = 48,
                            Name = "n48"
                        },
                        new
                        {
                            Id = 50,
                            Name = "n50"
                        },
                        new
                        {
                            Id = 51,
                            Name = "n51"
                        },
                        new
                        {
                            Id = 53,
                            Name = "n53"
                        },
                        new
                        {
                            Id = 54,
                            Name = "n54"
                        },
                        new
                        {
                            Id = 65,
                            Name = "n65"
                        },
                        new
                        {
                            Id = 66,
                            Name = "n66"
                        },
                        new
                        {
                            Id = 67,
                            Name = "n67"
                        },
                        new
                        {
                            Id = 70,
                            Name = "n70"
                        },
                        new
                        {
                            Id = 71,
                            Name = "n71"
                        },
                        new
                        {
                            Id = 74,
                            Name = "n74"
                        },
                        new
                        {
                            Id = 75,
                            Name = "n75"
                        },
                        new
                        {
                            Id = 76,
                            Name = "n76"
                        },
                        new
                        {
                            Id = 77,
                            Name = "n77"
                        },
                        new
                        {
                            Id = 78,
                            Name = "n78"
                        },
                        new
                        {
                            Id = 79,
                            Name = "n79"
                        },
                        new
                        {
                            Id = 80,
                            Name = "n80"
                        },
                        new
                        {
                            Id = 81,
                            Name = "n81"
                        },
                        new
                        {
                            Id = 82,
                            Name = "n82"
                        },
                        new
                        {
                            Id = 83,
                            Name = "n83"
                        },
                        new
                        {
                            Id = 84,
                            Name = "n84"
                        },
                        new
                        {
                            Id = 85,
                            Name = "n85"
                        },
                        new
                        {
                            Id = 86,
                            Name = "n86"
                        },
                        new
                        {
                            Id = 89,
                            Name = "n89"
                        },
                        new
                        {
                            Id = 90,
                            Name = "n90"
                        },
                        new
                        {
                            Id = 91,
                            Name = "n91"
                        },
                        new
                        {
                            Id = 92,
                            Name = "n92"
                        },
                        new
                        {
                            Id = 93,
                            Name = "n93"
                        },
                        new
                        {
                            Id = 94,
                            Name = "n94"
                        },
                        new
                        {
                            Id = 95,
                            Name = "n95"
                        },
                        new
                        {
                            Id = 96,
                            Name = "n96"
                        },
                        new
                        {
                            Id = 97,
                            Name = "n97"
                        },
                        new
                        {
                            Id = 98,
                            Name = "n98"
                        },
                        new
                        {
                            Id = 99,
                            Name = "n99"
                        },
                        new
                        {
                            Id = 100,
                            Name = "n100"
                        },
                        new
                        {
                            Id = 101,
                            Name = "n101"
                        },
                        new
                        {
                            Id = 102,
                            Name = "n102"
                        },
                        new
                        {
                            Id = 104,
                            Name = "n104"
                        },
                        new
                        {
                            Id = 105,
                            Name = "n105"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.FourGBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FourGBands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Thirteen"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Fourteen"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Seventeen"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Eighteen"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Nineteen"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Twenty"
                        },
                        new
                        {
                            Id = 21,
                            Name = "TwentyOne"
                        },
                        new
                        {
                            Id = 24,
                            Name = "TwentyFour"
                        },
                        new
                        {
                            Id = 25,
                            Name = "TwentyFive"
                        },
                        new
                        {
                            Id = 26,
                            Name = "TwentySix"
                        },
                        new
                        {
                            Id = 28,
                            Name = "TwentyEight"
                        },
                        new
                        {
                            Id = 29,
                            Name = "TwentyNine"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Thirty"
                        },
                        new
                        {
                            Id = 31,
                            Name = "ThirtyOne"
                        },
                        new
                        {
                            Id = 32,
                            Name = "ThirtyTwo"
                        },
                        new
                        {
                            Id = 34,
                            Name = "ThirtyFour"
                        },
                        new
                        {
                            Id = 37,
                            Name = "ThirtySeven"
                        },
                        new
                        {
                            Id = 38,
                            Name = "ThirtyEight"
                        },
                        new
                        {
                            Id = 39,
                            Name = "ThirtyNine"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Forty"
                        },
                        new
                        {
                            Id = 41,
                            Name = "FortyOne"
                        },
                        new
                        {
                            Id = 42,
                            Name = "FortyTwo"
                        },
                        new
                        {
                            Id = 43,
                            Name = "FortyThree"
                        },
                        new
                        {
                            Id = 46,
                            Name = "FortySix"
                        },
                        new
                        {
                            Id = 47,
                            Name = "FortySeven"
                        },
                        new
                        {
                            Id = 48,
                            Name = "FortyEight"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Fifty"
                        },
                        new
                        {
                            Id = 51,
                            Name = "FiftyOne"
                        },
                        new
                        {
                            Id = 53,
                            Name = "FiftyThree"
                        },
                        new
                        {
                            Id = 54,
                            Name = "FiftyFour"
                        },
                        new
                        {
                            Id = 65,
                            Name = "SixtyFive"
                        },
                        new
                        {
                            Id = 66,
                            Name = "SixtySix"
                        },
                        new
                        {
                            Id = 67,
                            Name = "SixtySeven"
                        },
                        new
                        {
                            Id = 69,
                            Name = "SixtyNine"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Seventy"
                        },
                        new
                        {
                            Id = 71,
                            Name = "SeventyOne"
                        },
                        new
                        {
                            Id = 72,
                            Name = "SeventyTwo"
                        },
                        new
                        {
                            Id = 73,
                            Name = "SeventyThree"
                        },
                        new
                        {
                            Id = 74,
                            Name = "SeventyFour"
                        },
                        new
                        {
                            Id = 75,
                            Name = "SeventyFive"
                        },
                        new
                        {
                            Id = 76,
                            Name = "SeventySix"
                        },
                        new
                        {
                            Id = 85,
                            Name = "EightyFive"
                        },
                        new
                        {
                            Id = 87,
                            Name = "EightySeven"
                        },
                        new
                        {
                            Id = 88,
                            Name = "EightyEight"
                        },
                        new
                        {
                            Id = 103,
                            Name = "OneHundredThree"
                        },
                        new
                        {
                            Id = 106,
                            Name = "OneHundredSix"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.GPU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MaxClock")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("GeekComparer.Domain.GeekbenchBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Metal")
                        .HasColumnType("integer");

                    b.Property<int>("MultiCore")
                        .HasColumnType("integer");

                    b.Property<int>("OpenCL")
                        .HasColumnType("integer");

                    b.Property<int>("SingleCore")
                        .HasColumnType("integer");

                    b.Property<int>("Vulkan")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GeekbenchBenchmarks");
                });

            modelBuilder.Entity("GeekComparer.Domain.HdrFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HdrFormats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "HDR10"
                        },
                        new
                        {
                            Id = 2,
                            Name = "DolbyVision"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HDR10Plus"
                        },
                        new
                        {
                            Id = 4,
                            Name = "HLG"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.ImageSensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ImageSensors");
                });

            modelBuilder.Entity("GeekComparer.Domain.LensType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LensTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Wide"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UltraWide"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Telephoto"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Depth"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Glass"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Plastic"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Carbon"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ceramic"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Memory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("MemoryCardSupported")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RAMId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RAMId");

                    b.HasIndex("StorageId");

                    b.ToTable("Memories");
                });

            modelBuilder.Entity("GeekComparer.Domain.MultiSimMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MultiSimModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Standby"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Active"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.NavigationSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NavigationSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GPS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GLONASS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Beidou"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Galileo"
                        },
                        new
                        {
                            Id = 5,
                            Name = "QZSS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "NAVIC"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.OperatingSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperatingSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Android"
                        },
                        new
                        {
                            Id = 2,
                            Name = "iOS"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Linux"
                        },
                        new
                        {
                            Id = 4,
                            Name = "WindowsPhone"
                        },
                        new
                        {
                            Id = 5,
                            Name = "HarmonyOS"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Symbian"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Panel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Panels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IPS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OLED"
                        },
                        new
                        {
                            Id = 3,
                            Name = "EInk"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.PhotoCapabilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("MaxHeight")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWidth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PhotoCapabilities");
                });

            modelBuilder.Entity("GeekComparer.Domain.RAM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Channels")
                        .HasColumnType("integer");

                    b.Property<int>("Clock")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("GeekComparer.Domain.RamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RamTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "LPDDR1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "LPDDR2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "LPDDR3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "LPDDR3E"
                        },
                        new
                        {
                            Id = 5,
                            Name = "LPDDR4"
                        },
                        new
                        {
                            Id = 6,
                            Name = "LPDDR4X"
                        },
                        new
                        {
                            Id = 7,
                            Name = "LPDDR5"
                        },
                        new
                        {
                            Id = 8,
                            Name = "LPDDR5X"
                        },
                        new
                        {
                            Id = 9,
                            Name = "LPDDR5T"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Screen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AspectRatio")
                        .HasColumnType("double precision");

                    b.Property<int>("HDRBrightness")
                        .HasColumnType("integer");

                    b.Property<int>("HDRFormatId")
                        .HasColumnType("integer");

                    b.Property<bool>("HDRSupport")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDCDimming")
                        .HasColumnType("boolean");

                    b.Property<int>("HeightInPixels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxBrightness")
                        .HasColumnType("integer");

                    b.Property<int>("MaxRefreshRatio")
                        .HasColumnType("integer");

                    b.Property<int>("MinRefreshRatio")
                        .HasColumnType("integer");

                    b.Property<int>("PanelId")
                        .HasColumnType("integer");

                    b.Property<double>("Size")
                        .HasColumnType("double precision");

                    b.Property<int>("WidthInPixels")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HDRFormatId");

                    b.HasIndex("PanelId");

                    b.ToTable("Screens");
                });

            modelBuilder.Entity("GeekComparer.Domain.Security", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasCoprocessor")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFaceUnlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFingerprintUnlock")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasIrisUnlock")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("GeekComparer.Domain.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Barometer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Proximity"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gyroscope"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Accelerometer"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Photo"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Magnetometer"
                        },
                        new
                        {
                            Id = 7,
                            Name = "LIDAR"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.SimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SimTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mini"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Micro"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nano"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Embedded"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Integrated"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Smartphone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("AnnounceDate")
                        .HasColumnType("date");

                    b.Property<Guid>("BatteryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BenchmarkId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BodyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChargingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConnectivityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MemoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<Guid>("ScreenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecurityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoCId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoftwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SoundId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BatteryId");

                    b.HasIndex("BenchmarkId");

                    b.HasIndex("BodyId");

                    b.HasIndex("Brand");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ChargingId");

                    b.HasIndex("ConnectivityId");

                    b.HasIndex("Manufacturer");

                    b.HasIndex("MemoryId");

                    b.HasIndex("Model");

                    b.HasIndex("ScreenId");

                    b.HasIndex("SecurityId");

                    b.HasIndex("SoCId");

                    b.HasIndex("SoftwareId");

                    b.HasIndex("SoundId");

                    b.ToTable("Smartphones");
                });

            modelBuilder.Entity("GeekComparer.Domain.SoC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CPUId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GPUId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("LaunchDate")
                        .HasColumnType("date");

                    b.Property<int>("Litography")
                        .HasColumnType("integer");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CPUId");

                    b.HasIndex("GPUId");

                    b.ToTable("SoCs");
                });

            modelBuilder.Entity("GeekComparer.Domain.Software", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DistributionVersion")
                        .HasColumnType("integer");

                    b.Property<int>("OperatingSystemId")
                        .HasColumnType("integer");

                    b.Property<int>("OperatingSystemVersion")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperatingSystemId");

                    b.ToTable("Softwares");
                });

            modelBuilder.Entity("GeekComparer.Domain.Sound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasFmRadio")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasHeadphoneJack")
                        .HasColumnType("boolean");

                    b.Property<int>("SpeakerTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SpeakerTypeId");

                    b.ToTable("Sounds");
                });

            modelBuilder.Entity("GeekComparer.Domain.SpeakerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mono"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stereo"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Stabilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stabilizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Optical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Digital"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("StorageVersion")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("GeekComparer.Domain.StorageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "UFS"
                        },
                        new
                        {
                            Id = 2,
                            Name = "eMMC"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Unspecified"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.ThreeDMarkBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Performance")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ThreeDMarkBenchmarks");
                });

            modelBuilder.Entity("GeekComparer.Domain.ThreeGBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ThreeGBands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "One"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Two"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Three"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Four"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Five"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Six"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Seven"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Eight"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Nine"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ten"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Eleven"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Twelve"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Thirteen"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Fourteen"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Nineteen"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Twenty"
                        },
                        new
                        {
                            Id = 21,
                            Name = "TwentyOne"
                        },
                        new
                        {
                            Id = 22,
                            Name = "TwentyTwo"
                        },
                        new
                        {
                            Id = 25,
                            Name = "TwentyFive"
                        },
                        new
                        {
                            Id = 26,
                            Name = "TwentySix"
                        },
                        new
                        {
                            Id = 32,
                            Name = "ThirtyTwo"
                        },
                        new
                        {
                            Id = 101,
                            Name = "A"
                        },
                        new
                        {
                            Id = 102,
                            Name = "B"
                        },
                        new
                        {
                            Id = 103,
                            Name = "C"
                        },
                        new
                        {
                            Id = 104,
                            Name = "D"
                        },
                        new
                        {
                            Id = 105,
                            Name = "E"
                        },
                        new
                        {
                            Id = 106,
                            Name = "F"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.TwoGBand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TwoGBands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TGSM380"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TGSM410"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GSM450"
                        },
                        new
                        {
                            Id = 4,
                            Name = "GSM480"
                        },
                        new
                        {
                            Id = 5,
                            Name = "GSM710"
                        },
                        new
                        {
                            Id = 6,
                            Name = "GSM750"
                        },
                        new
                        {
                            Id = 7,
                            Name = "TGSM810"
                        },
                        new
                        {
                            Id = 8,
                            Name = "GSM850"
                        },
                        new
                        {
                            Id = 9,
                            Name = "EGSM900"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RGSM900"
                        },
                        new
                        {
                            Id = 11,
                            Name = "TGSM900"
                        },
                        new
                        {
                            Id = 12,
                            Name = "DCS1800"
                        },
                        new
                        {
                            Id = 13,
                            Name = "PCS1900"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.USB", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConnectorId")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.ToTable("Usbs");
                });

            modelBuilder.Entity("GeekComparer.Domain.UsbConnector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsbConnectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "C"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Micro"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lightning"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.UsbFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsbFeatures");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Charging"
                        },
                        new
                        {
                            Id = 2,
                            Name = "OTG"
                        },
                        new
                        {
                            Id = 3,
                            Name = "StorageMode"
                        });
                });

            modelBuilder.Entity("GeekComparer.Domain.VideoCapabilities", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VideoCapabilities");
                });

            modelBuilder.Entity("GeekComparer.Domain.VideoMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FrameRate")
                        .HasColumnType("integer");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("VideoCapabilitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VideoCapabilitiesId");

                    b.ToTable("VideoModes");
                });

            modelBuilder.Entity("GeekComparer.Domain.WiFi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WiFis");
                });

            modelBuilder.Entity("GeekComparer.Domain.WiFiStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WiFiStandards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "b"
                        },
                        new
                        {
                            Id = 2,
                            Name = "a"
                        },
                        new
                        {
                            Id = 3,
                            Name = "g"
                        },
                        new
                        {
                            Id = 4,
                            Name = "n"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ac"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ax"
                        },
                        new
                        {
                            Id = 7,
                            Name = "be"
                        });
                });

            modelBuilder.Entity("SensorSmartphone", b =>
                {
                    b.Property<int>("SensorsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SmartphoneId")
                        .HasColumnType("uuid");

                    b.HasKey("SensorsId", "SmartphoneId");

                    b.HasIndex("SmartphoneId");

                    b.ToTable("SensorSmartphone");
                });

            modelBuilder.Entity("USBUsbFeature", b =>
                {
                    b.Property<int>("FeaturesId")
                        .HasColumnType("integer");

                    b.Property<Guid>("USBId")
                        .HasColumnType("uuid");

                    b.HasKey("FeaturesId", "USBId");

                    b.HasIndex("USBId");

                    b.ToTable("USBUsbFeature");
                });

            modelBuilder.Entity("WiFiWiFiStandard", b =>
                {
                    b.Property<int>("StandardsId")
                        .HasColumnType("integer");

                    b.Property<Guid>("WiFiId")
                        .HasColumnType("uuid");

                    b.HasKey("StandardsId", "WiFiId");

                    b.HasIndex("WiFiId");

                    b.ToTable("WiFiWiFiStandard");
                });

            modelBuilder.Entity("CameraSmartphone", b =>
                {
                    b.HasOne("GeekComparer.Domain.Camera", null)
                        .WithMany()
                        .HasForeignKey("CamerasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Smartphone", null)
                        .WithMany()
                        .HasForeignKey("SmartphoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellularFiveGBand", b =>
                {
                    b.HasOne("GeekComparer.Domain.FiveGBand", null)
                        .WithMany()
                        .HasForeignKey("Bands5GId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Cellular", null)
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellularFourGBand", b =>
                {
                    b.HasOne("GeekComparer.Domain.FourGBand", null)
                        .WithMany()
                        .HasForeignKey("Bands4GId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Cellular", null)
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellularSimType", b =>
                {
                    b.HasOne("GeekComparer.Domain.Cellular", null)
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.SimType", null)
                        .WithMany()
                        .HasForeignKey("SimTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellularThreeGBand", b =>
                {
                    b.HasOne("GeekComparer.Domain.ThreeGBand", null)
                        .WithMany()
                        .HasForeignKey("Bands3GId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Cellular", null)
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CellularTwoGBand", b =>
                {
                    b.HasOne("GeekComparer.Domain.TwoGBand", null)
                        .WithMany()
                        .HasForeignKey("Bands2GId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Cellular", null)
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CodecSound", b =>
                {
                    b.HasOne("GeekComparer.Domain.Codec", null)
                        .WithMany()
                        .HasForeignKey("CodecsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Sound", null)
                        .WithMany()
                        .HasForeignKey("SoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectivityNavigationSystem", b =>
                {
                    b.HasOne("GeekComparer.Domain.Connectivity", null)
                        .WithMany()
                        .HasForeignKey("ConnectivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.NavigationSystem", null)
                        .WithMany()
                        .HasForeignKey("NavigationSystemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeekComparer.Domain.Battery", b =>
                {
                    b.HasOne("GeekComparer.Domain.BatteryLife", "Life")
                        .WithMany()
                        .HasForeignKey("LifeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.BatteryType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Life");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GeekComparer.Domain.Benchmark", b =>
                {
                    b.HasOne("GeekComparer.Domain.AntutuBenchmark", "Antutu")
                        .WithMany()
                        .HasForeignKey("AntutuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.DxOMarkBenchmark", "DxOMark")
                        .WithMany()
                        .HasForeignKey("DxOMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.GeekbenchBenchmark", "Geekbench5")
                        .WithMany()
                        .HasForeignKey("Geekbench5Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.ThreeDMarkBenchmark", "ThreeDMark")
                        .WithMany()
                        .HasForeignKey("ThreeDMarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Antutu");

                    b.Navigation("DxOMark");

                    b.Navigation("Geekbench5");

                    b.Navigation("ThreeDMark");
                });

            modelBuilder.Entity("GeekComparer.Domain.Body", b =>
                {
                    b.HasOne("GeekComparer.Domain.Material", "BackMaterial")
                        .WithMany()
                        .HasForeignKey("BackMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.FingerprintLocation", "FingerprintLocation")
                        .WithMany()
                        .HasForeignKey("FingerprintLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Material", "FrameMaterial")
                        .WithMany()
                        .HasForeignKey("FrameMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackMaterial");

                    b.Navigation("FingerprintLocation");

                    b.Navigation("FrameMaterial");
                });

            modelBuilder.Entity("GeekComparer.Domain.Camera", b =>
                {
                    b.HasOne("GeekComparer.Domain.Autofocus", "Autofocus")
                        .WithMany()
                        .HasForeignKey("AutofocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.LensType", "LensType")
                        .WithMany()
                        .HasForeignKey("LensTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.PhotoCapabilities", "PhotoCapabilities")
                        .WithMany()
                        .HasForeignKey("PhotoCapabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.ImageSensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Stabilization", "Stabilization")
                        .WithMany()
                        .HasForeignKey("StabilizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.VideoCapabilities", "VideoCapabilities")
                        .WithMany()
                        .HasForeignKey("VideoCapabilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autofocus");

                    b.Navigation("LensType");

                    b.Navigation("PhotoCapabilities");

                    b.Navigation("Sensor");

                    b.Navigation("Stabilization");

                    b.Navigation("VideoCapabilities");
                });

            modelBuilder.Entity("GeekComparer.Domain.Cellular", b =>
                {
                    b.HasOne("GeekComparer.Domain.MultiSimMode", "MultiSimMode")
                        .WithMany()
                        .HasForeignKey("MultiSimModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiSimMode");
                });

            modelBuilder.Entity("GeekComparer.Domain.Connectivity", b =>
                {
                    b.HasOne("GeekComparer.Domain.Bluetooth", "Bluetooth")
                        .WithMany()
                        .HasForeignKey("BluetoothId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Cellular", "Cellular")
                        .WithMany()
                        .HasForeignKey("CellularId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.USB", "USB")
                        .WithMany()
                        .HasForeignKey("USBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.WiFi", "WiFi")
                        .WithMany()
                        .HasForeignKey("WiFiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bluetooth");

                    b.Navigation("Cellular");

                    b.Navigation("USB");

                    b.Navigation("WiFi");
                });

            modelBuilder.Entity("GeekComparer.Domain.Core", b =>
                {
                    b.HasOne("GeekComparer.Domain.CPU", null)
                        .WithMany("Cores")
                        .HasForeignKey("CPUId");
                });

            modelBuilder.Entity("GeekComparer.Domain.Memory", b =>
                {
                    b.HasOne("GeekComparer.Domain.RAM", "RAM")
                        .WithMany()
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RAM");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("GeekComparer.Domain.RAM", b =>
                {
                    b.HasOne("GeekComparer.Domain.RamType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GeekComparer.Domain.Screen", b =>
                {
                    b.HasOne("GeekComparer.Domain.HdrFormat", "HDRFormat")
                        .WithMany()
                        .HasForeignKey("HDRFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Panel", "Panel")
                        .WithMany()
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HDRFormat");

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("GeekComparer.Domain.Smartphone", b =>
                {
                    b.HasOne("GeekComparer.Domain.Battery", "Battery")
                        .WithMany()
                        .HasForeignKey("BatteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Benchmark", "Benchmark")
                        .WithMany()
                        .HasForeignKey("BenchmarkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Body", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Charging", "Charging")
                        .WithMany()
                        .HasForeignKey("ChargingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Connectivity", "Connectivity")
                        .WithMany()
                        .HasForeignKey("ConnectivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Memory", "Memory")
                        .WithMany()
                        .HasForeignKey("MemoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Screen", "Screen")
                        .WithMany()
                        .HasForeignKey("ScreenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Security", "Security")
                        .WithMany()
                        .HasForeignKey("SecurityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.SoC", "SoC")
                        .WithMany()
                        .HasForeignKey("SoCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Software", "Software")
                        .WithMany()
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Sound", "Sound")
                        .WithMany()
                        .HasForeignKey("SoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Battery");

                    b.Navigation("Benchmark");

                    b.Navigation("Body");

                    b.Navigation("Category");

                    b.Navigation("Charging");

                    b.Navigation("Connectivity");

                    b.Navigation("Memory");

                    b.Navigation("Screen");

                    b.Navigation("Security");

                    b.Navigation("SoC");

                    b.Navigation("Software");

                    b.Navigation("Sound");
                });

            modelBuilder.Entity("GeekComparer.Domain.SoC", b =>
                {
                    b.HasOne("GeekComparer.Domain.CPU", "CPU")
                        .WithMany()
                        .HasForeignKey("CPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.GPU", "GPU")
                        .WithMany()
                        .HasForeignKey("GPUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPU");

                    b.Navigation("GPU");
                });

            modelBuilder.Entity("GeekComparer.Domain.Software", b =>
                {
                    b.HasOne("GeekComparer.Domain.OperatingSystem", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperatingSystem");
                });

            modelBuilder.Entity("GeekComparer.Domain.Sound", b =>
                {
                    b.HasOne("GeekComparer.Domain.SpeakerType", "SpeakerType")
                        .WithMany()
                        .HasForeignKey("SpeakerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SpeakerType");
                });

            modelBuilder.Entity("GeekComparer.Domain.Storage", b =>
                {
                    b.HasOne("GeekComparer.Domain.StorageType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GeekComparer.Domain.USB", b =>
                {
                    b.HasOne("GeekComparer.Domain.UsbConnector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");
                });

            modelBuilder.Entity("GeekComparer.Domain.VideoMode", b =>
                {
                    b.HasOne("GeekComparer.Domain.VideoCapabilities", null)
                        .WithMany("Modes")
                        .HasForeignKey("VideoCapabilitiesId");
                });

            modelBuilder.Entity("SensorSmartphone", b =>
                {
                    b.HasOne("GeekComparer.Domain.Sensor", null)
                        .WithMany()
                        .HasForeignKey("SensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.Smartphone", null)
                        .WithMany()
                        .HasForeignKey("SmartphoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("USBUsbFeature", b =>
                {
                    b.HasOne("GeekComparer.Domain.UsbFeature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.USB", null)
                        .WithMany()
                        .HasForeignKey("USBId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WiFiWiFiStandard", b =>
                {
                    b.HasOne("GeekComparer.Domain.WiFiStandard", null)
                        .WithMany()
                        .HasForeignKey("StandardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeekComparer.Domain.WiFi", null)
                        .WithMany()
                        .HasForeignKey("WiFiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeekComparer.Domain.CPU", b =>
                {
                    b.Navigation("Cores");
                });

            modelBuilder.Entity("GeekComparer.Domain.VideoCapabilities", b =>
                {
                    b.Navigation("Modes");
                });
#pragma warning restore 612, 618
        }
    }
}
